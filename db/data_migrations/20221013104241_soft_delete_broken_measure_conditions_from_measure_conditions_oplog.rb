Sequel.migration do
  if TradeTariffBackend.uk?
    MEASURE_CONDITION_SIDS = [20_115_851, 20_115_852, 20_115_853, 20_115_854, 20_115_855, 20_115_856, 20_115_857, 20_115_858, 20_115_859, 20_115_860, 20_115_861, 20_115_862, 20_115_863, 20_115_864, 20_115_865, 20_115_866, 20_115_867, 20_115_868, 20_115_869, 20_115_870, 20_115_871, 20_115_872, 20_115_873, 20_115_874, 20_115_875, 20_115_876, 20_115_877, 20_115_878, 20_115_879, 20_115_880, 20_115_881, 20_115_882, 20_115_883, 20_115_884, 20_115_885, 20_115_886, 20_115_887, 20_115_888, 20_115_889, 20_115_890, 20_115_891, 20_115_892, 20_115_893, 20_115_894, 20_115_895, 20_115_896, 20_115_897, 20_115_898, 20_115_899, 20_115_900, 20_115_901, 20_115_902, 20_115_903, 20_115_904, 20_115_905, 20_115_906, 20_115_907, 20_115_908, 20_115_909, 20_115_910, 20_115_911, 20_115_912, 20_115_913, 20_115_914, 20_115_915, 20_115_916, 20_115_917, 20_115_918, 20_115_919, 20_115_920, 20_115_921, 20_115_922, 20_115_923, 20_115_924, 20_115_925, 20_115_926, 20_115_927, 20_115_928, 20_115_929, 20_115_930, 20_115_931, 20_115_932, 20_115_933, 20_115_934, 20_115_935, 20_115_936, 20_115_937, 20_115_938, 20_115_939, 20_115_940, 20_115_941, 20_115_942, 20_115_943, 20_115_944, 20_115_945, 20_115_946, 20_115_947, 20_115_948, 20_115_949, 20_115_950, 20_115_951, 20_115_952, 20_115_953, 20_115_954, 20_115_955, 20_115_956, 20_115_957, 20_115_958, 20_115_959, 20_115_960, 20_115_961, 20_115_962, 20_115_963, 20_115_964, 20_115_965, 20_115_966, 20_115_967, 20_115_968, 20_115_969, 20_115_970, 20_115_971, 20_115_972, 20_115_973, 20_115_974, 20_115_975, 20_115_976, 20_115_977, 20_115_978, 20_115_979, 20_115_980, 20_115_981, 20_115_982, 20_115_983, 20_115_984, 20_115_985, 20_115_986, 20_115_987, 20_115_988, 20_115_989, 20_115_990, 20_115_991, 20_115_992, 20_115_993, 20_115_994, 20_115_995, 20_115_996, 20_115_997, 20_115_998, 20_029_764, 20_029_765, 20_029_766].freeze
    FILENAME = '20221013104241_soft_delete_broken_measure_conditions_from_measure_conditions_oplog'.freeze
    OPERATION_DATE = Date.parse('2022-10-13')

    up do
      inserts = []

      MeasureCondition.where(measure_condition_sid: MEASURE_CONDITION_SIDS).each do |measure_condition|
        operation_klass = MeasureCondition::Operation

        values = measure_condition.values.slice(*operation_klass.columns).except(:oid)
        values[:filename] = FILENAME
        values[:operation_date] = OPERATION_DATE
        values[:operation] = Sequel::Plugins::Oplog::DESTROY_OPERATION
        values[:created_at] = operation_klass.dataset.current_datetime if operation_klass.columns.include?(:created_at)

        inserts << operation_klass.dataset.insert_sql(values)
      end

      MeasureCondition.db.run(inserts.join(";\n"))
    end

    down do
      MeasureCondition::Operation.where(
        measure_condition_sid: MEASURE_CONDITION_SIDS,
        filename: FILENAME,
        operation_date: OPERATION_DATE,
      ).delete
    end
  end
end
