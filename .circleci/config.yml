version: 2.1

filter-not-main: &filter-not-main
  filters:
    branches:
      ignore:
        - main
        - /^hotfix\/.+/

filter-main: &filter-main
  filters:
    branches:
      only:
        - main
        - /^hotfix\/.+/

filter-release: &filter-release
  filters:
    tags:
      only: /^release-202[\d-]+/
    branches:
      ignore:
        - "/.*/"

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  ruby: circleci/ruby@2
  slack: circleci/slack@4.3.0
  tariff: trade-tariff/trade-tariff-ci-orb@0
  terraform: circleci/terraform@3.2.1

executors:
  terraform:
    docker:
      - image: hashicorp/terraform:1.9.8
    resource_class: small
    working_directory: "/tmp/terraform"
    environment:
      TF_INPUT: 0
      TF_IN_AUTOMATION: 1
  python-executor:
    docker:
      - image: circleci/python:latest
    environment:
      TERRAFORM_VERSION: 1.9.8

jobs:
  ruby-checks:
    docker:
      - image: cimg/ruby:3.4.2
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Install C lib dependencies
          command: |
            sudo apt update
            sudo apt install libcurl4-openssl-dev
      - run:
          name: Install ruby dependencies
          command: |
            bundle install
      - run:
          name: Rubocop all files
          when: always
          command: bundle exec rubocop
      - run:
          name: Inspecting with Brakeman
          when: always
          command: "bundle exec brakeman -o test-results/brakeman/brakeman.junit -o brakeman.html --no-progress --separate-models"
      - store_test_results:
          path: test-results/brakeman/
      - store_artifacts:
          path: brakeman.html

  pre-commit:
    executor: python-executor
    steps:
      - tariff/pre-commit:
          terraform_version: "1.9.8"

  write-docker-tag:
    parameters:
      environment:
        type: string
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run: echo "docker_tag = \"$(git rev-parse --short HEAD)\"" >> terraform/config_<< parameters.environment >>.tfvars
      - persist_to_workspace:
          root: .
          paths:
            - terraform/

  fmt-validate-terraform:
    executor: terraform
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/init:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
      - terraform/fmt:
          path: terraform/
      - terraform/validate:
          path: terraform/

  plan-terraform:
    executor: terraform
    environment:
      TF_CLI_ARGS: "-lock=false"
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/init:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
      - terraform/plan:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
          var_file: config_<< parameters.environment >>.tfvars

  apply-terraform:
    executor: terraform
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - run:
          name: Add curl
          command: apk --no-cache add curl jq
      - attach_workspace:
          at: .
      - terraform/init:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
      - terraform/apply:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
          var_file: config_<< parameters.environment >>.tfvars
          lock-timeout: 5m
      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: deployments
          event: pass
          template: basic_success_1

  flaky-tests:
    docker:
      - image: cimg/ruby:3.4.2
        environment:
          BUNDLE_JOBS: "3"
          BUNDLE_RETRY: "3"
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/tariff_test"
          PGHOST: localhost
          RAILS_ENV: test
      - image: cimg/postgres:13.6
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: tariff_test
          POSTGRES_PASSWORD: postgres
      - image: cimg/redis:6.2
        environment:
          REDIS_URL: "redis://localhost:6379/"
      - image: opensearchproject/opensearch:2
        environment:
          cluster.name: elasticsearch
          transport.host: localhost
          network.host: 127.0.0.1
          http.port: 9200
          discovery.type: single-node
          DISABLE_SECURITY_PLUGIN: true

    steps:
      - checkout
      - run:
          name: "Install OS packages"
          command: |
            sudo apt-get update
            sudo apt-get install libcurl4-openssl-dev postgresql-client
      - run:
          name: Install ruby dependencies
          command: |
            bundle install
      - run:
          name: "Setup DB"
          command: |
            RAILS_ENV=test bundle exec rails db:structure:load --trace
      - run:
          name: "Check ElasticSearch for availability"
          command: |
            curl "http://localhost:9200/_cat/health"
      - ruby/rspec-test:
          label: "Run flaky tests"
          tag: "flaky"
      - slack/notify:
          channel: tariffs-regression
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: tariffs-regression
          event: pass
          template: basic_success_1

  test:
    resource_class: medium
    docker:
      - image: cimg/ruby:3.4.2
        environment:
          BUNDLE_JOBS: "3"
          BUNDLE_RETRY: "3"
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/tariff_test"
          ELASTICSEARCH_URL: "http://localhost:9200"
          FRONTEND_REDIS_URL: "redis://localhost:6379/"
          PGHOST: localhost
          RAILS_ENV: test
          REDIS_URL: "redis://localhost:6379/"
      - image: cimg/postgres:13.6
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: tariff_test
          POSTGRES_PASSWORD: postgres
      - image: cimg/redis:6.2
      - image: opensearchproject/opensearch:2
        environment:
          cluster.name: elasticsearch
          transport.host: localhost
          network.host: 127.0.0.1
          http.port: 9200
          discovery.type: single-node
          DISABLE_SECURITY_PLUGIN: true
    steps:
      - checkout
      - run:
          name: "Install OS packages"
          command: |
            sudo apt-get update
            sudo apt-get install libcurl4-openssl-dev postgresql-client
      - run:
          name: Install ruby dependencies
          command: |
            bundle install
      - run:
          name: "Setup DB"
          command: |
            RAILS_ENV=test bundle exec rails db:structure:load --trace
      - run:
          name: "Check ElasticSearch for availability"
          command: |
            curl "http://localhost:9200/_cat/health"
      - ruby/rspec-test
      - run:
          name: Test Rules of Origin data files
          command: |
            if [ -z `git diff --name-only $(git merge-base main HEAD)..HEAD -- db/rules_of_origin` ]; then
              echo "Skipping data checks - Rules of origin data unchanged"
            else
              bundle exec rspec --tag=roo_data \
                                --format RspecJunitFormatter \
                                --out /tmp/test-results/roo_data/results.xml \
                                --format progress
            fi
      - store_test_results:
          path: /tmp/test-results/roo_data
      - store_artifacts:
          path: coverage
      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1

  sync-opensearch-packages:
    docker:
      - image: cimg/base:current
    parameters:
      space:
        type: string
      bucket:
        type: string
    steps:
      - aws-cli/install
      - checkout
      - run:
          name: "Synchronise opensearch packages"
          command: |
            bin/sync-opensearch-packages << parameters.space >> << parameters.bucket >>

workflows:
  version: 2

  flaky-tests:
    triggers:
      - schedule:
          # The night before a release
          cron: "00 18 * * 3,0"
          filters:
            branches:
              only:
                - main

    jobs:
      - flaky-tests:
          context: trade-tariff

  deploy-to-development:
    jobs:
      - ruby-checks:
          <<: *filter-not-main

      - pre-commit:
          <<: *filter-not-main

      - test:
          context: trade-tariff-notifications
          <<: *filter-not-main

      - write-docker-tag:
          name: write-docker-tag-dev
          environment: development
          <<: *filter-not-main

      - fmt-validate-terraform:
          name: fmt-terraform-dev
          context: trade-tariff-terraform-aws-development
          environment: development
          <<: *filter-not-main

      - plan-terraform:
          name: plan-terraform-dev
          context: trade-tariff-terraform-aws-development
          environment: development
          requires:
            - write-docker-tag-dev
            - fmt-terraform-dev
          <<: *filter-not-main

      - tariff/build-and-push:
          name: build-and-push-dev
          context: trade-tariff-terraform-aws-development
          environment: development
          image_name: tariff-backend
          ssm_parameter: "/development/BACKEND_ECR_URL"
          <<: *filter-not-main

      - apply-terraform:
          name: apply-terraform-dev
          context: trade-tariff-terraform-aws-development
          environment: development
          requires:
            - test
            - ruby-checks
            - pre-commit
            - plan-terraform-dev
            - build-and-push-dev
          <<: *filter-not-main

      - sync-opensearch-packages:
          name: sync-packages-dev
          space: development
          bucket: trade-tariff-opensearch-packages-844815912454
          context: trade-tariff-terraform-aws-development
          <<: *filter-not-main

      - tariff/smoketests:
          name: smoketest-dev
          context: trade-tariff-testing
          url: https://dev.trade-tariff.service.gov.uk
          yarn_run: dev-tariff-backend-smoketests
          requires:
            - apply-terraform-dev
          <<: *filter-not-main

  deploy-to-staging-and-production:
    jobs:
      - write-docker-tag:
          name: write-docker-tag-staging
          environment: staging

      - plan-terraform:
          name: plan-terraform-staging
          context: trade-tariff-terraform-aws-staging
          environment: staging
          requires:
            - write-docker-tag-staging
          <<: *filter-not-main

      - tariff/build-and-push:
          name: build-and-push-live
          context: trade-tariff-terraform-aws-staging
          environment: staging
          image_name: tariff-backend
          ssm_parameter: "/staging/BACKEND_ECR_URL"
          <<: *filter-main

      - apply-terraform:
          name: apply-terraform-staging
          context: trade-tariff-terraform-aws-staging
          environment: staging
          requires:
            - write-docker-tag-staging
            - plan-terraform-staging
            - build-and-push-live
          <<: *filter-main

      - sync-opensearch-packages:
          name: sync-packages-staging
          space: staging
          bucket: trade-tariff-opensearch-packages-451934005581
          context: trade-tariff-terraform-aws-staging
          <<: *filter-main

      # - tariff/smoketests:
      #     name: smoketest-staging
      #     context: trade-tariff-testing
      #     url: https://staging.trade-tariff.service.gov.uk
      #     yarn_run: staging-tariff-backend-smoketests
      #     requires:
      #       - apply-terraform-staging
      #     <<: *filter-main

      - write-docker-tag:
          name: write-docker-tag-prod
          environment: production
          requires:
            - apply-terraform-staging

      - plan-terraform:
          name: plan-terraform-prod
          context: trade-tariff-terraform-aws-production
          environment: production
          requires:
            - write-docker-tag-prod
          <<: *filter-not-main

      - promote-to-production?:
          type: approval
          <<: *filter-main

      - tariff/create-production-release:
          name: create-production-release
          context: trade-tariff-releases
          image-name: tariff-backend-production
          requires:
            - promote-to-production?
          <<: *filter-main

      - sync-opensearch-packages:
          name: sync_packages_production
          space: production
          bucket: trade-tariff-opensearch-packages-production
          context: trade-tariff
          requires:
            - promote-to-production?
          <<: *filter-release

      - write-docker-tag:
          name: write-docker-tag-prod-release
          environment: production
          <<: *filter-release

      - apply-terraform:
          name: apply-terraform-prod
          context: trade-tariff-terraform-aws-production
          environment: production
          requires:
            - write-docker-tag-prod-release
          <<: *filter-release
