version: 2.1

filter-not-main: &filter-not-main
  filters:
    branches:
      ignore:
        - main
        - /^dependabot/(?!docker/).*/
        - /^hotfix\/.+/

filter-main: &filter-main
  filters:
    branches:
      only:
        - main
        - /^hotfix\/.+/

filter-release: &filter-release
  filters:
    tags:
      only: /^release-202[\d-]+/
    branches:
      ignore:
        - "/.*/"

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  ruby: circleci/ruby@2
  cloudfoundry: circleci/cloudfoundry@1.0
  slack: circleci/slack@4.3.0
  queue: eddiewebb/queue@1.6.4
  tariff: trade-tariff/trade-tariff-ci-orb@0
  terraform: circleci/terraform@3.2.1

executors:
  terraform:
    docker:
      - image: hashicorp/terraform:1.5.5
    resource_class: small
    working_directory: "/tmp/terraform"
    environment:
      TF_INPUT: 0
      TF_IN_AUTOMATION: 1

commands:
  cf-deploy-docker:
    parameters:
      docker_image_tag:
        type: string
      space:
        type: string
      domain_prefix:
        type: string
      service:
        type: string
      environment_key:
        type: string
      app_domain_prefix:
        type: string

    steps:
      - checkout

      - tariff/cf-install:
          space: << parameters.space >>
          version: "7.6.0"

      - tariff/deploy-dark-app:
          aws_access_key_id: "$AWS_ACCESS_KEY_ID"
          aws_secret_access_key: "$AWS_SECRET_ACCESS_KEY"
          cf_app: tariff-<< parameters.service >>-backend
          docker_image: tariff-backend
          docker_tag: << parameters.docker_image_tag >>
          ecr_repo: "$ECR_REPO"
          environment_key: << parameters.environment_key >>
          space: << parameters.space >>

      - run:
          name: "Map dark routes"
          command: |
            cf map-route "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" \
              "apps.internal" \
              --hostname "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark"

      - run:
          name: "Create custom network policies for the backend"
          command: |
            # Enable routing from this frontend to backend applications which are private
            cf add-network-policy \
              "$CF_FRONTEND_APP-<< parameters.environment_key >>" \
              "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" \
              --protocol tcp --port 8080

            cf add-network-policy \
              "$CF_ADMIN_APP-<< parameters.environment_key >>" \
              "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" \
              --protocol tcp --port 8080

            cf add-network-policy \
              "$CF_DUTYCALCULATOR_APP-<< parameters.environment_key >>" \
              "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" \
              --protocol tcp --port 8080

            cf add-network-policy \
              "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" \
              "tariff-search-query-parser-<< parameters.environment_key >>" \
              --protocol tcp --port 8080

      - when:
          condition:
            equal: ["development", << parameters.space >>]
          steps:
            - run:
                name: "Recreate review app network policies"
                command: |
                  for REVIEW_APP in $(cf apps | grep 'tariff-frontend-pr' | cut -d ' ' -f 1)
                  do
                    cf add-network-policy $REVIEW_APP tariff-<<parameters.service >>-backend-dev-dark --protocol tcp --port 8080
                  done

      - run:
          name: "Verify new version is working on dark URL."
          command: |
            APP_NAME="tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark"

            sleep 15

            HTTPCODE=`cf ssh $APP_NAME -c 'curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/healthcheckz'`

            if [ "$HTTPCODE" -ne 200 ];then
              echo "dark route not available, failing deploy ($HTTPCODE)"
              cf logs "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" --recent
              cf delete -f "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark"
              exit 1
            fi

      - run:
          name: "Attach autoscaling policy"
          command: |
            cf attach-autoscaling-policy \
              "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" \
              config/autoscaling/<< parameters.space >>-policy.json

      - run:
          name: "Switch api beta dark app routes live"
          command: |
            # Start sending api beta traffic to new version
            cf map-route "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" "<< parameters.domain_prefix >>.trade-tariff.service.gov.uk" --path "/<< parameters.service >>/api/beta/"

            # Stop sending api beta traffic to previous version
            cf unmap-route "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>" "<< parameters.domain_prefix >>.trade-tariff.service.gov.uk" --path "/<< parameters.service >>/api/beta/"

      - tariff/pivot-dark-app:
          app_domain_prefix: << parameters.app_domain_prefix >>
          cf_app: tariff-<< parameters.service >>-backend
          environment_key: << parameters.environment_key >>
          space: << parameters.space >>
          domain: "apps.internal"

      - run:
          name: Drain old app
          command: sleep 30

      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1

      - slack/notify:
          channel: deployments
          event: pass
          template: basic_success_1

  cf-deploy-docker-worker:
    parameters:
      docker_image_tag:
        type: string
      space:
        type: string
      service:
        type: string
      environment_key:
        type: string
    steps:
      - checkout
      - tariff/cf-install:
          space: << parameters.space >>
          version: "7.6.0"
      - run:
          name: "Fetch existing manifest"
          command: |
            cf create-app-manifest "tariff-<< parameters.service >>-backend-worker-<< parameters.environment_key >>" -p deploy_manifest.yml
      - run:
          name: "Push Worker"
          command: |
            export DOCKER_IMAGE=tariff-backend
            export DOCKER_TAG="<< parameters.docker_image_tag >>"
            export CF_DOCKER_PASSWORD=$AWS_SECRET_ACCESS_KEY

            cf push "tariff-<< parameters.service >>-backend-worker-<< parameters.environment_key >>" \
              -f deploy_manifest.yml \
              --no-route \
              --docker-image "$ECR_REPO/$DOCKER_IMAGE:$DOCKER_TAG" \
              --docker-username "$AWS_ACCESS_KEY_ID"

  cf-deploy-docker-tasks:
    parameters:
      docker_image_tag:
        type: string
      space:
        type: string
      service:
        type: string
      environment_key:
        type: string
    steps:
      - checkout
      - tariff/cf-install:
          space: << parameters.space >>
          version: "7.6.0"
      - run:
          name: "Create tasks app manifest"
          command: |
            cf create-app-manifest "tariff-<< parameters.service >>-backend-worker-<< parameters.environment_key >>" -p tasks_deploy_manifest.yml
      - run:
          name: "Push Tasks app"
          command: |
            export DOCKER_IMAGE=tariff-backend
            export DOCKER_TAG="<< parameters.docker_image_tag >>"
            export CF_DOCKER_PASSWORD=$AWS_SECRET_ACCESS_KEY

            cf push "tariff-<< parameters.service >>-backend-tasks-<< parameters.environment_key >>" \
             -f tasks_deploy_manifest.yml \
             --no-route \
             --task \
             --docker-image "$ECR_REPO/$DOCKER_IMAGE:$DOCKER_TAG" \
             --docker-username "$AWS_ACCESS_KEY_ID"

      - run-migrations:
          service: << parameters.service >>
          environment_key: << parameters.environment_key >>
          space: << parameters.space >>

  run-migrations:
    parameters:
      service:
        type: string
      environment_key:
        type: string
      space:
        type: string
    steps:
      - run:
          name: "Run Migrations"
          command: |
            cf run-task "tariff-<< parameters.service >>-backend-tasks-<< parameters.environment_key >>" --command "cd app && bundle exec rails db:migrate" --name "db-migrate" --wait
            cf run-task "tariff-<< parameters.service >>-backend-tasks-<< parameters.environment_key >>" --command "cd app && bundle exec rails data:migrate" --name "data-migrate" --wait

jobs:
  dump-search-references:
    parameters:
      from_environment_key:
        type: string
        default: production
      from_service:
        type: string
        default: uk
    docker:
      - image: cimg/base:current-22.04
    steps:
      - checkout
      - tariff/cf-install:
          space: << parameters.from_environment_key >>
          version: "7.6.0"
      - run:
          name: "Install necessary dependencies"
          command: |
            cf install-plugin conduit -r CF-Community -f
            sudo apt-get update -qq
            sudo apt-get install postgresql-client
      - run:
          name: "Dump search references"
          command: |
            mkdir dump
            cf conduit "tariff-<< parameters.from_service >>-<< parameters.from_environment_key >>-postgres" -- pg_dump --file dump/tariff-<< parameters.from_service >>-<< parameters.from_environment_key >>-postgres-search_references.psql --no-acl --no-owner --clean --verbose --table search_references
      - persist_to_workspace:
          root: dump/
          paths:
            - tariff-<< parameters.from_service >>-<< parameters.from_environment_key >>-postgres-search_references.psql

  dump-and-persist-database:
    parameters:
      space:
        type: string
    docker:
      - image: cimg/base:current-22.04
    steps:
      - checkout
      - aws-cli/install
      - tariff/cf-install:
          space: << parameters.space >>
          version: "7.6.0"
      - run:
          name: "Install additional dependencies"
          command: |
            cf install-plugin conduit -r CF-Community -f
            sudo apt-get update -qq
            sudo apt-get install postgresql-client
      - run:
          name: "Dump whole database"
          command: |
            cf conduit tariff-merged-<< parameters.space >>-postgres -- pg_dump --file tariff-merged-<< parameters.space >>-postgres.sql --no-acl --no-owner --clean --verbose
      - run:
          name: "Compress dump"
          command: |
            zip tariff-merged-<< parameters.space >>.sql.zip tariff-merged-<< parameters.space >>-postgres.sql
      - run:
          name: "Persist dump"
          command: |
            aws s3 cp tariff-merged-<< parameters.space >>.sql.zip s3://$DATABASE_BACKUPS_BUCKET_NAME/snapshots/

  renew-search-references:
    parameters:
      from_environment_key:
        type: string
        default: production
      from_service:
        type: string
        default: uk
      to_environment_key:
        type: string
      to_service:
        type: string
      to_space:
        type: string
    docker:
      - image: cimg/base:current-22.04
    steps:
      - checkout
      - tariff/cf-install:
          space: << parameters.from_environment_key >>
          version: "7.6.0"
      - run:
          name: "Install necessary dependencies"
          command: |
            cf install-plugin conduit -r CF-Community -f
            sudo apt-get update -qq
            sudo apt-get install postgresql-client
      - attach_workspace:
          at: dump/
      - run:
          name: "Restore search references"
          command: |
            cf target -s << parameters.to_space >>
            cf conduit tariff-<< parameters.to_service >>-<< parameters.to_space >>-postgres -- psql $PGDATABASE < dump/tariff-<< parameters.from_service >>-<< parameters.from_environment_key >>-postgres-search_references.psql
      - run-migrations:
          service: << parameters.to_service >>
          space: << parameters.to_space >>
          environment_key: << parameters.to_environment_key >>

  ruby-checks:
    docker:
      - image: cimg/ruby:3.2.2
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Install C lib dependencies
          command: |
            sudo apt update
            sudo apt install libcurl4-openssl-dev
      - ruby/install-deps
      - run:
          name: Rubocop all files
          when: always
          command: bundle exec rubocop
      - run:
          name: Inspecting with Brakeman
          when: always
          command: "bundle exec brakeman -o test-results/brakeman/brakeman.junit -o brakeman.html --no-progress --separate-models"
      - store_test_results:
          path: test-results/brakeman/
      - store_artifacts:
          path: brakeman.html

  build:
    environment:
      IMAGE_NAME: tariff-backend
    parameters:
      dev-build:
        default: false
        type: boolean
    docker:
      - image: cimg/ruby:3.2.2
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: false
      - aws-cli/install
      - run:
          name: "Set docker tag"
          command: |
            echo "export DOCKER_TAG=<<# parameters.dev-build >>dev-<</ parameters.dev-build >>${CIRCLE_SHA1}" >> $BASH_ENV

      - run:
          name: "Build Docker image"
          command: |
            export GIT_NEW_REVISION=$(git rev-parse --short HEAD)
            echo $GIT_NEW_REVISION >REVISION
            docker build -t $IMAGE_NAME:$DOCKER_TAG .
      - run:
          name: "Push image"
          command: |
            aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $ECR_REPO
            docker tag $IMAGE_NAME:$DOCKER_TAG $ECR_REPO/$IMAGE_NAME:$DOCKER_TAG
            docker push $ECR_REPO/$IMAGE_NAME:$DOCKER_TAG

  write-docker-tag:
    parameters:
      environment:
        type: string
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run: echo "docker_tag = \"$(git rev-parse --short HEAD)\"" >> terraform/config_<< parameters.environment >>.tfvars
      - persist_to_workspace:
          root: .
          paths:
            - terraform/

  fmt-validate-terraform:
    executor: terraform
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/init:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
      - terraform/fmt:
          path: terraform/
      - terraform/validate:
          path: terraform/

  plan-terraform:
    executor: terraform
    environment:
      TF_CLI_ARGS: "-lock=false"
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/init:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
      - terraform/plan:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
          var_file: config_<< parameters.environment >>.tfvars

  apply-terraform:
    executor: terraform
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/init:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
      - terraform/apply:
          path: terraform/
          backend_config_file: backends/<< parameters.environment >>.tfbackend
          var_file: config_<< parameters.environment >>.tfvars
          lock-timeout: 5m

  flaky-tests:
    docker:
      - image: cimg/ruby:3.2.2
        environment:
          BUNDLE_JOBS: "3"
          BUNDLE_RETRY: "3"
          RAILS_ENV: test
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/tariff_test"
      - image: cimg/postgres:13.6
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: tariff_test
          POSTGRES_PASSWORD: postgres
      - image: cimg/redis:6.2
        environment:
          REDIS_URL: "redis://localhost:6379/"
      - image: opensearchproject/opensearch:2
        environment:
          cluster.name: elasticsearch
          transport.host: localhost
          network.host: 127.0.0.1
          http.port: 9200
          discovery.type: single-node
          plugins.security.disabled: true
    steps:
      - checkout
      - run:
          name: "Install OS packages"
          command: |
            sudo apt-get update
            sudo apt-get install libcurl4-openssl-dev postgresql-client
      - ruby/install-deps
      - run:
          name: "Setup DB"
          command: |
            RAILS_ENV=test bundle exec rails db:structure:load --trace
      - run:
          name: "Check ElasticSearch for availability"
          command: |
            curl "http://localhost:9200/_cat/health"
      - ruby/rspec-test:
          label: "Run flaky tests"
          tag: "flaky"
      - slack/notify:
          channel: tariffs-regression
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: tariffs-regression
          event: pass
          template: basic_success_1

  test:
    resource_class: medium
    docker:
      - image: cimg/ruby:3.2.2
        environment:
          BUNDLE_JOBS: "3"
          BUNDLE_RETRY: "3"
          RAILS_ENV: test
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/tariff_test"
      - image: cimg/postgres:13.6
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: tariff_test
          POSTGRES_PASSWORD: postgres
      - image: cimg/redis:6.2
        environment:
          - REDIS_URL: "redis://localhost:6379/"
      - image: opensearchproject/opensearch:1.2.4
        environment:
          - cluster.name: elasticsearch
          - transport.host: localhost
          - network.host: 127.0.0.1
          - http.port: 9200
          - discovery.type: single-node
          - plugins.security.disabled: true
    steps:
      - checkout
      - run:
          name: "Install OS packages"
          command: |
            sudo apt-get update
            sudo apt-get install libcurl4-openssl-dev postgresql-client
      - ruby/install-deps
      - run:
          name: "Setup DB"
          command: |
            RAILS_ENV=test bundle exec rails db:structure:load --trace
      - run:
          name: "Check ElasticSearch for availability"
          command: |
            curl "http://localhost:9200/_cat/health"
      - ruby/rspec-test
      - run:
          name: Test Rules of Origin data files
          command: |
            if [ -z `git diff --name-only $(git merge-base main HEAD)..HEAD -- db/rules_of_origin` ]; then
              echo "Skipping data checks - Rules of origin data unchanged"
            else
              bundle exec rspec --tag=roo_data \
                                --format RspecJunitFormatter \
                                --out /tmp/test-results/roo_data/results.xml \
                                --format progress
            fi
      - store_test_results:
          path: /tmp/test-results/roo_data
      - store_artifacts:
          path: coverage
      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1

  deploy-production:
    docker:
      - image: cimg/ruby:3.2.2
    environment:
      SENTRY_ENVIRONMENT: "production"
    parameters:
      service:
        type: string
    steps:
      - cf-deploy-docker-tasks:
          docker_image_tag: $CIRCLE_TAG
          space: "production"
          environment_key: "production"
          service: << parameters.service >>
      - cf-deploy-docker-worker:
          docker_image_tag: $CIRCLE_TAG
          space: "production"
          environment_key: "production"
          service: << parameters.service >>
      - cf-deploy-docker:
          docker_image_tag: $CIRCLE_TAG
          space: "production"
          environment_key: "production"
          domain_prefix: "www"
          app_domain_prefix: "www"
          service: << parameters.service >>
      - tariff/sentry-release:
          environment: production

  sync-opensearch-packages:
    docker:
      - image: cimg/base:current
    parameters:
      space:
        type: string
      bucket:
        type: string
    steps:
      - aws-cli/install
      - checkout
      - run:
          name: "Synchronise opensearch packages"
          command: |
            bin/sync-opensearch-packages << parameters.space >> << parameters.bucket >>

  notify-production-deployment:
    docker:
      - image: cimg/ruby:3.2.2
    steps:
      - tariff/notify-production-release:
          app-name: Backend
          slack-channel: trade_tariff
          release-tag: $CIRCLE_TAG

workflows:
  version: 2

  flaky-tests:
    triggers:
      - schedule:
          # The night before a release
          cron: "00 18 * * 3,0"
          filters:
            branches:
              only:
                - main

    jobs:
      - flaky-tests:
          context: trade-tariff

  sunday:
    triggers:
      - schedule:
          # Every Sunday at 2.30 PM UTC
          cron: "30 2 * * 0"
          filters:
            branches:
              only:
                - main
    jobs:
      - dump-and-persist-database:
          name: development-dump-and-persist-database
          context: trade-tariff
          space: development
      - dump-and-persist-database:
          name: staging-dump-and-persist-database
          context: trade-tariff
          space: staging
      - dump-and-persist-database:
          name: production-dump-and-persist-database
          context: trade-tariff
          space: production

  deploy-to-development:
    jobs:
      - ruby-checks:
          context: trade-tariff
          <<: *filter-not-main

      - test:
          context: trade-tariff
          <<: *filter-not-main
          requires:
            - ruby-checks

      - write-docker-tag:
          name: write-docker-tag-dev
          environment: development
          <<: *filter-not-main

      - fmt-validate-terraform:
          name: fmt-terraform-dev
          context: trade-tariff-terraform-aws-development
          environment: development
          <<: *filter-not-main

      - plan-terraform:
          name: plan-terraform-dev
          context: trade-tariff-terraform-aws-development
          environment: development
          requires:
            - write-docker-tag-dev
            - fmt-terraform-dev
          <<: *filter-not-main

      - tariff/build-and-push:
          name: build-and-push-dev
          context: trade-tariff-terraform-aws-development
          environment: development
          image_name: tariff-backend
          ssm_parameter: "/development/BACKEND_ECR_URL"
          <<: *filter-not-main

      - apply-terraform:
          name: apply-terraform-dev
          context: trade-tariff-terraform-aws-development
          environment: development
          requires:
            - test
            - plan-terraform-dev
            - build-and-push-dev
          <<: *filter-not-main

      - sync-opensearch-packages:
          name: sync-packages-dev
          space: development
          bucket: trade-tariff-opensearch-packages-844815912454
          context: trade-tariff-terraform-aws-development
          <<: *filter-not-main

      - tariff/smoketests:
          name: smoketest-dev
          context: trade-tariff
          url: https://dev.trade-tariff.service.gov.uk
          yarn_run: dev-tariff-backend-smoketests
          requires:
            - apply-terraform-dev
          <<: *filter-not-main

  deploy-to-staging:
    jobs:
      - write-docker-tag:
          name: write-docker-tag-staging
          environment: staging

      - plan-terraform:
          name: plan-terraform-staging
          context: trade-tariff-terraform-aws-staging
          environment: staging
          requires:
            - write-docker-tag-staging
          <<: *filter-not-main

      - tariff/build-and-push:
          name: build-and-push-live
          context: trade-tariff-terraform-aws-staging
          environment: staging
          image_name: tariff-backend
          ssm_parameter: "/staging/BACKEND_ECR_URL"
          <<: *filter-main

      - apply-terraform:
          name: apply-terraform-staging
          context: trade-tariff-terraform-aws-staging
          environment: staging
          requires:
            - write-docker-tag-staging
            - plan-terraform-staging
            - build-and-push-live
          <<: *filter-main

      - sync-opensearch-packages:
          name: sync-packages-staging
          space: staging
          bucket: trade-tariff-opensearch-packages-451934005581
          context: trade-tariff-terraform-aws-staging
          <<: *filter-main

      - tariff/smoketests:
          name: smoketest-staging
          context: trade-tariff
          url: https://staging.trade-tariff.service.gov.uk
          yarn_run: staging-tariff-backend-smoketests
          requires:
            - apply-terraform-staging
          <<: *filter-main

  deploy-to-production:
    jobs:
      - write-docker-tag:
          name: write-docker-tag-prod
          environment: production

      - plan-terraform:
          name: plan-terraform-prod
          context: trade-tariff-terraform-aws-production
          environment: production
          requires:
            - write-docker-tag-prod
          <<: *filter-not-main

      - build:
          name: build-live
          context: trade-tariff
          <<: *filter-main

      - promote-to-production?:
          type: approval
          <<: *filter-main

      - tariff/create-production-release:
          name: create-production-release
          context: trade-tariff
          image-name: tariff-backend
          requires:
            - promote-to-production?
          <<: *filter-main

      - sync-opensearch-packages:
          name: sync_packages_production
          space: production
          bucket: trade-tariff-opensearch-packages-production
          context: trade-tariff
          requires:
            - promote-to-production?
          <<: *filter-release

      - deploy-production:
          matrix:
            parameters:
              service:
                - xi
                - uk
          context: trade-tariff
          <<: *filter-release

      - notify-production-deployment:
          context: trade-tariff
          requires:
            - deploy-production
          <<: *filter-release

      - write-docker-tag:
          name: write-docker-tag-prod-release
          environment: production
          <<: *filter-release

      - apply-terraform:
          name: apply-terraform-prod
          context: trade-tariff-terraform-aws-production
          environment: production
          requires:
            - write-docker-tag-prod-release
          <<: *filter-release
