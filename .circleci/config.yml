version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  ruby: circleci/ruby@2
  cloudfoundry: circleci/cloudfoundry@1.0
  slack: circleci/slack@4.3.0
  queue: eddiewebb/queue@1.6.4
  tariff: trade-tariff/trade-tariff-ci-orb@0 # can also change to @dev:<gitsha> for specific version or @dev:alpha to test dev branches

commands:
  cf-install:
    parameters:
      space:
        type: string
      version:
        type: string
        default: "7.6.0"
    steps:
      - run:
          name: "Setup CF CLI"
          command: |
            curl -L -o cf.deb --retry 3 'https://trade-tariff-hosted-binaries.s3.eu-west-2.amazonaws.com/cf7-cli-installer_7.4.0_x86-64.deb'
            sudo dpkg -i cf.deb
            cf -v
            cf api "$CF_ENDPOINT"
            cf auth "$CF_USER" "$CF_PASSWORD"
            cf add-plugin-repo CF-Community https://plugins.cloudfoundry.org
            cf install-plugin app-autoscaler-plugin -r CF-Community -f
            cf target -o "$CF_ORG" -s "<< parameters.space >>"

  cf_deploy_docker:
    parameters:
      docker_image_tag:
        type: string
      space:
        type: string
      domain_prefix:
        type: string
      service:
        type: string
      environment_key:
        type: string
    steps:
      - checkout
      - aws-cli/install
      - cf-install:
          space: << parameters.space >>
          version: "7.6.0"
      - run:
          name: "Fetch existing manifest"
          command: |
            cf create-app-manifest "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>" -p deploy_manifest.yml
      - run:
          name: "Push new app in dark mode"
          command: |
            export DOCKER_IMAGE=tariff-backend
            export DOCKER_TAG="<< parameters.docker_image_tag >>"

            # Push as "dark" instance
            CF_DOCKER_PASSWORD=$AWS_SECRET_ACCESS_KEY cf push "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" -f deploy_manifest.yml --no-route  --docker-image "$ECR_REPO/$DOCKER_IMAGE:$DOCKER_TAG" --docker-username "$AWS_ACCESS_KEY_ID"

            # Map dark route
            cf map-route  "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" apps.internal -n "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark"

            # Attach precreated autoscaling policy
            cf attach-autoscaling-policy "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" config/autoscaling/<< parameters.space >>-policy.json

            # Enable routing from this frontend to backend applications which are private
            cf add-network-policy "$CF_FRONTEND_APP-<< parameters.environment_key >>" "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" --protocol tcp --port 8080
            cf add-network-policy "$CF_ADMIN_APP-<< parameters.environment_key >>" "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" --protocol tcp --port 8080
            cf add-network-policy "$CF_DUTYCALCULATOR_APP-<< parameters.environment_key >>" "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" --protocol tcp --port 8080
            cf add-network-policy "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" "tariff-search-query-parser-<< parameters.environment_key >>" --protocol tcp --port 8080

      - when:
          condition:
            equal: ["development", << parameters.space >>]
          steps:
            - run:
                name: "Recreate review app network policies"
                command: |
                  for REVIEW_APP in $(cf apps | grep 'tariff-frontend-pr' | cut -d ' ' -f 1)
                  do
                    cf add-network-policy $REVIEW_APP tariff-<<parameters.service >>-backend-dev-dark --protocol tcp --port 8080
                  done

      - run:
          name: "Verify new version is working on dark URL."
          command: |
            sleep 15
            # Verify new version is working on dark URL.
            APP_NAME="tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark"

            HTTPCODE=`cf ssh $APP_NAME -c 'curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/healthcheck'`

            if [ "$HTTPCODE" -ne 200 ];then
              echo "dark route not available, failing deploy ($HTTPCODE)"
              cf logs "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" --recent
              cf delete -f "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark"
              exit 1
            fi

      - run:
          name: "Switch dark app to live"
          command: |
            # Send "real" url to new version
            cf unmap-route  "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" apps.internal -n "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark"

            # Start sending traffic to new version
            cf map-route "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" apps.internal -n "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>"
            cf map-route "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" "<< parameters.domain_prefix >>.trade-tariff.service.gov.uk" --path "/<< parameters.service >>/api/beta/"

            # Stop sending traffic to previous version
            cf unmap-route "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>" apps.internal -n "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>"
            cf unmap-route "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>" "<< parameters.domain_prefix >>.trade-tariff.service.gov.uk" --path "/<< parameters.service >>/api/beta/"

      - run:
          name: Drain old app
          command: sleep 30

      - run:
          name: Stop and remove old app
          command: |
            # stop previous version
            cf stop "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>"

            # allow the old app to shutdown prior to deletion of the app
            sleep 10

            # delete previous version
            cf delete "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>" -f

            # Switch name of "dark" version to claim correct name
            cf rename "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>"

      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: deployments
          event: pass
          template: basic_success_1
  cf_deploy_docker_worker:
    parameters:
      docker_image_tag:
        type: string
      space:
        type: string
      service:
        type: string
      environment_key:
        type: string
    steps:
      - checkout
      - aws-cli/install
      - cf-install:
          space: << parameters.space >>
          version: "7.6.0"
      - run:
          name: "Fetch existing manifest"
          command: |
            cf create-app-manifest "tariff-<< parameters.service >>-backend-worker-<< parameters.environment_key >>" -p deploy_manifest.yml
      - run:
          name: "Push Worker"
          command: |
            export DOCKER_IMAGE=tariff-backend
            export DOCKER_TAG="<< parameters.docker_image_tag >>"
            CF_DOCKER_PASSWORD=$AWS_SECRET_ACCESS_KEY cf push "tariff-<< parameters.service >>-backend-worker-<< parameters.environment_key >>" -f deploy_manifest.yml --no-route --docker-image "$ECR_REPO/$DOCKER_IMAGE:$DOCKER_TAG" --docker-username "$AWS_ACCESS_KEY_ID"

  cf_deploy_docker_tasks:
    parameters:
      docker_image_tag:
        type: string
      space:
        type: string
      service:
        type: string
      environment_key:
        type: string
    steps:
      - checkout
      - aws-cli/install
      - cf-install:
          space: << parameters.space >>
          version: "7.6.0"
      - run:
          name: "Create tasks app manifest"
          command: |
            cf create-app-manifest "tariff-<< parameters.service >>-backend-worker-<< parameters.environment_key >>" -p tasks_deploy_manifest.yml
      - run:
          name: "Push Tasks app"
          command: |
            export DOCKER_IMAGE=tariff-backend
            export DOCKER_TAG="<< parameters.docker_image_tag >>"
            CF_DOCKER_PASSWORD=$AWS_SECRET_ACCESS_KEY cf push "tariff-<< parameters.service >>-backend-tasks-<< parameters.environment_key >>" \
                                                               -f tasks_deploy_manifest.yml \
                                                               --no-route \
                                                               --task \
                                                               --docker-image "$ECR_REPO/$DOCKER_IMAGE:$DOCKER_TAG" \
                                                               --docker-username "$AWS_ACCESS_KEY_ID"
      - run_migrations:
          service: << parameters.service >>
          environment_key: << parameters.environment_key >>
          space: << parameters.space >>

  smoketest:
    parameters:
      url:
        type: string
      space:
        type: string
    steps:
      - run:
          name: "Checkout tests repo"
          command: git clone --depth=1 "https://github.com/trade-tariff/trade-tariff-testing/"
      - restore_cache:
          keys:
            - v2-smoketest-deps-{{ checksum "trade-tariff-testing/yarn.lock" }}
      - run:
          name: "Install NPM packages"
          command: "cd trade-tariff-testing && yarn install"
      - save_cache:
          key: v2-smoketest-deps-{{ checksum "trade-tariff-testing/yarn.lock" }}
          paths:
            - trade-tariff-testing/node_modules
            - /root/.cache/Cypress
      - run:
          name: "Cypress Smoke tests"
          command: |
            cd trade-tariff-testing

            yarn run << parameters.space >>-tariff-backend-smoketests

  sentry-release:
    steps:
      - checkout
      - run:
          name: Create release and notify Sentry of deploy
          command: |
            sudo curl -sL \
                      -o /usr/local/bin/sentry-cli \
                      https://github.com/getsentry/sentry-cli/releases/download/1.74.3/sentry-cli-Linux-x86_64
            sudo chmod 0755 /usr/local/bin/sentry-cli
            export SENTRY_RELEASE=$(sentry-cli releases propose-version)
            sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE &&
              sentry-cli releases set-commits $SENTRY_RELEASE --auto &&
              sentry-cli releases finalize $SENTRY_RELEASE &&
              sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT ||
              /usr/bin/true # prevent sentry outage from blocking deploys - see HOTT-1570

  run_migrations:
    parameters:
      service:
        type: string
      environment_key:
        type: string
      space:
        type: string
    steps:
      - run:
          name: "Run Migrations"
          command: |
            cf run-task "tariff-<< parameters.service >>-backend-tasks-<< parameters.environment_key >>" --command "cd app && bundle exec rails db:migrate" --name "db-migrate" --wait
            cf run-task "tariff-<< parameters.service >>-backend-tasks-<< parameters.environment_key >>" --command "cd app && bundle exec rails data:migrate" --name "data-migrate" --wait

jobs:
  dump_search_references:
    parameters:
      from_environment_key:
        type: string
        default: production
      from_service:
        type: string
        default: uk
    docker:
      - image: cimg/base:current-22.04
    steps:
      - checkout
      - aws-cli/install
      - cf-install:
          space: << parameters.from_environment_key >>
          version: "7.6.0"
      - run:
          name: "Install necessary dependencies"
          command: |
            cf install-plugin conduit -r CF-Community -f
            sudo apt-get update -qq
            sudo apt-get install postgresql-client
      - run:
          name: "Dump search references"
          command: |
            mkdir dump
            cf conduit "tariff-<< parameters.from_service >>-<< parameters.from_environment_key >>-postgres" -- pg_dump --file dump/tariff-<< parameters.from_service >>-<< parameters.from_environment_key >>-postgres-search_references.psql --no-acl --no-owner --clean --verbose --table search_references
      - persist_to_workspace:
          root: dump/
          paths:
            - tariff-<< parameters.from_service >>-<< parameters.from_environment_key >>-postgres-search_references.psql

  dump_and_persist_database:
    parameters:
      space:
        type: string
      service:
        type: string
    docker:
      - image: cimg/base:current-22.04
    steps:
      - checkout
      - aws-cli/install
      - cf-install:
          space: << parameters.space >>
          version: "7.6.0"
      - run:
          name: "Install additional dependencies"
          command: |
            cf install-plugin conduit -r CF-Community -f
            sudo apt-get update -qq
            sudo apt-get install postgresql-client
      - run:
          name: "Dump whole database"
          command: |
            cf conduit tariff-<< parameters.service >>-<< parameters.space >>-postgres -- pg_dump --file tariff-<< parameters.service >>-<< parameters.space >>-postgres.sql --no-acl --no-owner --clean --verbose
      - run:
          name: "Compress dump"
          command: |
            zip tariff-<< parameters.service >>-<< parameters.space >>.sql.zip tariff-<< parameters.service >>-<< parameters.space >>-postgres.sql
      - run:
          name: "Persist dump"
          command: |
            aws s3 cp tariff-<< parameters.service >>-<< parameters.space >>.sql.zip s3://$DATABASE_BACKUPS_BUCKET_NAME/snapshots/

  renew_search_references:
    parameters:
      from_environment_key:
        type: string
        default: production
      from_service:
        type: string
        default: uk
      to_environment_key:
        type: string
      to_service:
        type: string
      to_space:
        type: string
    docker:
      - image: cimg/base:current-22.04
    steps:
      - checkout
      - aws-cli/install
      - cf-install:
          space: << parameters.from_environment_key >>
          version: "7.6.0"
      - run:
          name: "Install necessary dependencies"
          command: |
            cf install-plugin conduit -r CF-Community -f
            sudo apt-get update -qq
            sudo apt-get install postgresql-client
      - attach_workspace:
          at: dump/
      - run:
          name: "Restore search references"
          command: |
            cf target -s << parameters.to_space >>
            cf conduit tariff-<< parameters.to_service >>-<< parameters.to_space >>-postgres -- psql $PGDATABASE < dump/tariff-<< parameters.from_service >>-<< parameters.from_environment_key >>-postgres-search_references.psql
      - run_migrations:
          service: << parameters.to_service >>
          space: << parameters.to_space >>
          environment_key: << parameters.to_environment_key >>

  linters:
    docker:
      - image: cimg/ruby:3.2.2
    resource_class: small
    steps:
      - checkout
      - run:
          name: Install C lib dependencies
          command: |
            sudo apt update
            sudo apt install libcurl4-openssl-dev
      - ruby/install-deps
      - run:
          name: Rubocop changed files
          when: always
          command: bundle exec rubocop $(git diff --name-only --diff-filter=ACM $(git merge-base main HEAD)..HEAD | egrep '\.rb|\.rake') Gemfile
      - run:
          name: Inspecting with Brakeman
          when: always
          command: "bundle exec brakeman -o test-results/brakeman/brakeman.junit -o brakeman.html --no-progress --separate-models"
      - store_test_results:
          path: test-results/brakeman/
      - store_artifacts:
          path: brakeman.html

  build:
    environment:
      IMAGE_NAME: tariff-backend
    parameters:
      dev-build:
        default: false
        type: boolean
    docker:
      - image: cimg/ruby:3.2.2
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: false
      - aws-cli/install
      - run:
          name: "Set docker tag"
          command: |
            echo "export DOCKER_TAG=<<# parameters.dev-build >>dev-<</ parameters.dev-build >>${CIRCLE_SHA1}" >> $BASH_ENV

      - run:
          name: "Build Docker image"
          command: |
            export GIT_NEW_REVISION=$(git rev-parse --short HEAD)
            echo $GIT_NEW_REVISION >REVISION
            docker build -t $IMAGE_NAME:$DOCKER_TAG .
      - run:
          name: "Push image"
          command: |
            aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $ECR_REPO
            docker tag $IMAGE_NAME:$DOCKER_TAG $ECR_REPO/$IMAGE_NAME:$DOCKER_TAG
            docker push $ECR_REPO/$IMAGE_NAME:$DOCKER_TAG

  flaky_tests:
    docker:
      - image: cimg/ruby:3.2.2
        environment:
          BUNDLE_JOBS: "3"
          BUNDLE_RETRY: "3"
          RAILS_ENV: test
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/tariff_test"
      - image: cimg/postgres:13.6
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: tariff_test
          POSTGRES_PASSWORD: postgres
      - image: circleci/redis:4.0.9
        environment:
          REDIS_URL: "redis://localhost:6379/"
      - image: opensearchproject/opensearch:1.2.4
        environment:
          cluster.name: elasticsearch
          transport.host: localhost
          network.host: 127.0.0.1
          http.port: 9200
          discovery.type: single-node
          plugins.security.disabled: true
    steps:
      - checkout
      - run:
          name: "Install OS packages"
          command: |
            sudo apt-get update
            sudo apt-get install libcurl4-openssl-dev postgresql-client
      - ruby/install-deps
      - run:
          name: "Setup DB"
          command: |
            RAILS_ENV=test bundle exec rails db:structure:load --trace
      - run:
          name: "Check ElasticSearch for availability"
          command: |
            curl "http://localhost:9200/_cat/health"
      - ruby/rspec-test:
          label: 'Run flaky tests'
          tag: "flaky"
      - slack/notify:
          channel: tariffs-regression
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: tariffs-regression
          event: pass
          template: basic_success_1
  test:
    docker:
      - image: cimg/ruby:3.2.2
        environment:
          BUNDLE_JOBS: "3"
          BUNDLE_RETRY: "3"
          RAILS_ENV: test
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/tariff_test"
      - image: cimg/postgres:13.6
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: tariff_test
          POSTGRES_PASSWORD: postgres
      - image: circleci/redis:4.0.9
        environment:
          - REDIS_URL: "redis://localhost:6379/"
      - image: opensearchproject/opensearch:1.2.4
        environment:
          - cluster.name: elasticsearch
          - transport.host: localhost
          - network.host: 127.0.0.1
          - http.port: 9200
          - discovery.type: single-node
          - plugins.security.disabled: true
    resource_class: medium
    steps:
      - checkout
      - run:
          name: "Install OS packages"
          command: |
            sudo apt-get update
            sudo apt-get install libcurl4-openssl-dev postgresql-client
      - ruby/install-deps
      - run:
          name: "Setup DB"
          command: |
            RAILS_ENV=test bundle exec rails db:structure:load --trace
      - run:
          name: "Check ElasticSearch for availability"
          command: |
            curl "http://localhost:9200/_cat/health"
      - ruby/rspec-test
      - run:
          name: Test Rules of Origin data files
          command: |
            if [ -z `git diff --name-only $(git merge-base main HEAD)..HEAD -- db/rules_of_origin` ]; then
              echo "Skipping data checks - Rules of origin data unchanged"
            else
              bundle exec rspec --tag=roo_data \
                                --format RspecJunitFormatter \
                                --out /tmp/test-results/roo_data/results.xml \
                                --format progress
            fi
      - store_test_results:
          path: /tmp/test-results/roo_data
      - store_artifacts:
          path: coverage
      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1

  smoketest_dev:
    docker:
      - image: "cypress/base:16.5.0"
    steps:
      - smoketest:
          url: https://dev.trade-tariff.service.gov.uk
          space: dev

  smoketest_staging:
    docker:
      - image: "cypress/base:16.5.0"
    steps:
      - smoketest:
          url: https://staging.trade-tariff.service.gov.uk
          space: staging

  deploy_dev:
    docker:
      - image: cimg/ruby:3.2.2
    environment:
      SENTRY_ENVIRONMENT: "development"
    parameters:
      service:
        type: string
    steps:
      - queue/until_front_of_line:
          time: "10"
          consider-branch: false
          dont-quit: true
      - cf_deploy_docker_tasks:
          docker_image_tag: dev-$CIRCLE_SHA1
          space: "development"
          environment_key: "dev"
          service: << parameters.service >>
      - cf_deploy_docker_worker:
          docker_image_tag: dev-$CIRCLE_SHA1
          space: "development"
          environment_key: "dev"
          service: << parameters.service >>
      - cf_deploy_docker:
          docker_image_tag: dev-$CIRCLE_SHA1
          space: "development"
          environment_key: "dev"
          domain_prefix: "dev"
          service: << parameters.service >>
      - sentry-release

  deploy_main_to_staging:
    docker:
      - image: cimg/ruby:3.2.2
    environment:
      SENTRY_ENVIRONMENT: "staging"
    parameters:
      service:
        type: string
    steps:
      - queue/until_front_of_line:
          time: "10"
          dont-quit: true
      - cf_deploy_docker_tasks:
          docker_image_tag: $CIRCLE_SHA1
          space: "staging"
          environment_key: "staging"
          service: << parameters.service >>
      - cf_deploy_docker_worker:
          docker_image_tag: $CIRCLE_SHA1
          space: "staging"
          environment_key: "staging"
          service: << parameters.service >>
      - cf_deploy_docker:
          docker_image_tag: $CIRCLE_SHA1
          space: "staging"
          environment_key: "staging"
          domain_prefix: "staging"
          service: << parameters.service >>
      - sentry-release

  deploy_release_to_staging:
    docker:
      - image: cimg/ruby:3.2.2
    environment:
      SENTRY_ENVIRONMENT: "staging"
    parameters:
      service:
        type: string
    steps:
      - cf_deploy_docker_tasks:
          docker_image_tag: $CIRCLE_TAG
          space: "staging"
          environment_key: "staging"
          service: << parameters.service >>
      - cf_deploy_docker_worker:
          docker_image_tag: $CIRCLE_TAG
          space: "staging"
          environment_key: "staging"
          service: << parameters.service >>
      - cf_deploy_docker:
          docker_image_tag: $CIRCLE_TAG
          space: "staging"
          environment_key: "staging"
          domain_prefix: "staging"
          service: << parameters.service >>

  deploy_production:
    docker:
      - image: cimg/ruby:3.2.2
    environment:
      SENTRY_ENVIRONMENT: "production"
    parameters:
      service:
        type: string
    steps:
      - cf_deploy_docker_tasks:
          docker_image_tag: $CIRCLE_TAG
          space: "production"
          environment_key: "production"
          service: << parameters.service >>
      - cf_deploy_docker_worker:
          docker_image_tag: $CIRCLE_TAG
          space: "production"
          environment_key: "production"
          service: << parameters.service >>
      - cf_deploy_docker:
          docker_image_tag: $CIRCLE_TAG
          space: "production"
          environment_key: "production"
          domain_prefix: "www"
          service: << parameters.service >>
      - sentry-release

  sync_opensearch_packages:
    docker:
      - image: cimg/base:current
    parameters:
      space:
        type: string
    steps:
      - aws-cli/install
      - checkout
      - run:
          name: "Synchronise opensearch packages"
          command: |
            bin/sync_opensearch_packages << parameters.space >>

  notify_production_deployment:
    docker:
      - image: cimg/ruby:3.2.2
    steps:
      - tariff/notify-production-release:
          app-name: Backend
          slack-channel: trade_tariff
          release-tag: $CIRCLE_TAG

workflows:
  version: 2

  flaky_tests:
    triggers:
      - schedule:
          # The night before a release
          cron: "00 18 * * 3,0"
          filters:
            branches:
              only:
                - main

    jobs:
      - flaky_tests:
          context: trade-tariff
  # sunday:
  #   triggers:
  #     - schedule:
  #         # Every Sunday at 2.30 PM UTC
  #         cron: "30 2 * * 0"
  #         filters:
  #           branches:
  #             only:
  #               - main
  #   jobs:
  #     - dump_and_persist_database:
  #         name: uk_development_dump_and_persist_database
  #         context: trade-tariff
  #         service: uk
  #         space: development
  #     - dump_and_persist_database:
  #         name: xi_development_dump_and_persist_database
  #         context: trade-tariff
  #         service: xi
  #         space: development
  #     - dump_and_persist_database:
  #         name: uk_staging_dump_and_persist_database
  #         context: trade-tariff
  #         service: uk
  #         space: staging
  #     - dump_and_persist_database:
  #         name: xi_staging_dump_and_persist_database
  #         context: trade-tariff
  #         service: xi
  #         space: staging
  #     - dump_and_persist_database:
  #         name: uk_production_dump_and_persist_database
  #         context: trade-tariff
  #         service: uk
  #         space: production
  #     - dump_and_persist_database:
  #         name: xi_production_dump_and_persist_database
  #         context: trade-tariff
  #         service: xi
  #         space: production
  # daily:
  #   triggers:
  #     - schedule:
  #         # Every day at 6 pm
  #         cron: "00 18 * * *"
  #         filters:
  #           branches:
  #             only:
  #               - main
  #   jobs:
  #     - dump_search_references:
  #         context: trade-tariff
  #     - renew_search_references:
  #         name: production_xi_renew
  #         context: trade-tariff
  #         to_space: production
  #         to_environment_key: production
  #         to_service: xi
  #         requires:
  #           - dump_search_references
  #     - renew_search_references:
  #         name: staging_uk_renew
  #         context: trade-tariff
  #         to_space: staging
  #         to_environment_key: staging
  #         to_service: uk
  #         requires:
  #           - dump_search_references
  #     - renew_search_references:
  #         name: staging_xi_renew
  #         context: trade-tariff
  #         to_space: staging
  #         to_environment_key: staging
  #         to_service: xi
  #         requires:
  #           - dump_search_references
  #     - renew_search_references:
  #         name: development_uk_renew
  #         context: trade-tariff
  #         to_space: development
  #         to_environment_key: dev
  #         to_service: uk
  #         requires:
  #           - dump_search_references
  #     - renew_search_references:
  #         name: development_xi_renew
  #         context: trade-tariff
  #         to_space: development
  #         to_environment_key: dev
  #         to_service: xi
  #         requires:
  #           - dump_search_references

  ci:
    jobs:
      - linters:
          context: trade-tariff
      - test:
          context: trade-tariff
          filters:
            branches:
              ignore:
                - main
      - build:
          name: build_dev
          context: trade-tariff
          dev-build: true
          filters:
            branches:
              ignore:
                - main
                - /^dependabot\/(?!docker\/).*/
                - /^hotfix\/.+/
      - deploy_dev:
          matrix:
            parameters:
              service:
                - xi
                - uk
          context: trade-tariff
          filters:
            branches:
              ignore:
                - main
                - /^dependabot\/(?!docker\/).*/
                - /^hotfix\/.+/
          requires:
            - test
            - build_dev
      - sync_opensearch_packages:
          name: sync_packages_dev
          space: development
          context: trade-tariff
          filters:
            branches:
              ignore:
                - main
                - /^dependabot\/(?!docker\/).*/
                - /^hotfix\/.+/
      - smoketest_dev:
          name: smoketest_dev
          context: trade-tariff
          filters:
            branches:
              ignore:
                - main
                - /^hotfix\/.+/
                - /^dependabot\/(?!docker\/).*/
          requires:
            - deploy_dev
            - sync_packages_dev
      - sync_opensearch_packages:
          name: sync_packages_staging
          space: staging
          context: trade-tariff
          filters:
            branches:
              only:
                - main
                - /^hotfix\/.+/
      - build:
          name: build_live
          context: trade-tariff
          filters:
            branches:
              only:
                - main
                - /^hotfix\/.+/
      - deploy_main_to_staging:
          matrix:
            parameters:
              service:
                - xi
                - uk
          context: trade-tariff
          requires:
            - build_live
      - smoketest_staging:
          name: smoketest_staging
          context: trade-tariff
          filters:
            branches:
              only:
                - main
                - /^hotfix\/.+/
          requires:
            - sync_packages_staging
            - deploy_main_to_staging
      - hold_create_release:
          type: approval
          filters:
            branches:
              only:
                - main
                - /^hotfix\/.+/
          requires:
            - deploy_main_to_staging
      - tariff/create-production-release:
          context: trade-tariff
          image-name: tariff-backend
          filters:
            branches:
              only:
                - main
                - /^hotfix\/.+/
          requires:
            - hold_create_release
      - deploy_release_to_staging:
          matrix:
            parameters:
              service:
                - xi
                - uk
          context: trade-tariff
          filters:
            tags:
              only: /^release-202[\d-]+/
            branches:
              ignore: /.*/
      - smoketest_staging:
          name: smoketest_release_to_staging
          context: trade-tariff
          filters:
            tags:
              only: /^release-202[\d-]+/
            branches:
              ignore: /.*/
          requires:
            - deploy_release_to_staging
      - hold_deploy_production:
          type: approval
          filters:
            tags:
              only: /^release-202[\d-]+/
            branches:
              ignore: /.*/
      - sync_opensearch_packages:
          name: sync_packages_production
          space: production
          context: trade-tariff
          filters:
            tags:
              only: /^release-202[\d-]+/
            branches:
              ignore: /.*/
          requires:
            - hold_deploy_production
      - deploy_production:
          matrix:
            parameters:
              service:
                - xi
                - uk
          context: trade-tariff
          filters:
            tags:
              only: /^release-202[\d-]+/
            branches:
              ignore: /.*/
          requires:
            - hold_deploy_production
      - notify_production_deployment:
          context: trade-tariff
          filters:
            tags:
              only: /^release-202[\d-]+/
            branches:
              ignore: /.*/
          requires:
            - deploy_production
