version: 2.1

orbs:
  ruby: circleci/ruby@1.1.2
  cloudfoundry: circleci/cloudfoundry@1.0
  slack: circleci/slack@4.3.0

commands:
  cf_deploy_docker:
    parameters:
      dev-release:
        default: false
        type: boolean
      space:
        type: string
      service:
        type: string
      environment_key:
        type: string
    steps:
      - checkout
      - run:
          name: "Setup CF CLI"
          command: |
            curl -L -o cf.deb 'https://packages.cloudfoundry.org/stable?release=debian64&version=7.2.0&source=github-rel'
            sudo dpkg -i cf.deb
            cf -v
            cf api "$CF_ENDPOINT"
            cf auth "$CF_USER" "$CF_PASSWORD"
            cf add-plugin-repo CF-Community https://plugins.cloudfoundry.org
            cf install-plugin app-autoscaler-plugin -r CF-Community -f
            cf target -o "$CF_ORG" -s "<< parameters.space >>"
      - run:
          name: "Fetch existing manifest"
          command: |
            cf create-app-manifest "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>" -p deploy_manifest.yml
      - run:
          name: "Push new app in dark mode"
          command: |
            export IMAGE=enginetransformation/tariff-backend
            export DOCKER_IMAGE=${IMAGE}:<<# parameters.dev-release >>dev-<</ parameters.dev-release >>${CIRCLE_SHA1}

            # Push as "dark" instance
            cf push "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" -f deploy_manifest.yml --no-route --docker-image "$DOCKER_IMAGE"
            # Map dark route
            cf map-route  "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" apps.internal -n "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark"

            # Attach precreated autoscaling policy
            cf attach-autoscaling-policy "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" config/autoscaling/<< parameters.space >>-policy.json

            # Enable routing from this frontend to backend applications which are private
            cf add-network-policy "$CF_FRONTEND_APP-<< parameters.environment_key >>" "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" --protocol tcp --port 8080
            cf add-network-policy "$CF_ADMIN_APP-<< parameters.environment_key >>" "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" --protocol tcp --port 8080
            cf add-network-policy "$CF_DUTYCALCULATOR_APP-<< parameters.environment_key >>" "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" --protocol tcp --port 8080

      - run:
          name: "Verify new version is working on dark URL."
          command: |
            sleep 15
            # Verify new version is working on dark URL.
            APP_NAME="tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark"

            HTTPCODE=`cf ssh $APP_NAME -c 'curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/healthcheck'`

            if [ "$HTTPCODE" -ne 200 ];then
              echo "dark route not available, failing deploy ($HTTPCODE)"
              cf logs "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" --recent
              cf delete -f "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark"
              exit 1
            fi
      - run:
          name: "Switch dark app to live"
          command: |
            # Send "real" url to new version
            cf unmap-route  "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" apps.internal -n "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark"

            # Start sending traffic to new version
            cf map-route  "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" apps.internal -n "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>"

            # Stop sending traffic to previous version
            cf unmap-route  "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>" apps.internal -n "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>"

            # stop previous version
            cf stop "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>"

            # delete previous version
            cf delete "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>" -f

            # Switch name of "dark" version to claim correct name
            cf rename "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>-dark" "tariff-<< parameters.service >>-backend-<< parameters.environment_key >>"

      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: deployments
          event: pass
          template: basic_success_1

  cf_deploy_docker_worker:
    parameters:
      dev-release:
        default: false
        type: boolean
      space:
        type: string
      service:
        type: string
      environment_key:
        type: string
    steps:
      - checkout
      - run:
          name: "Setup CF CLI"
          command: |
            curl -L -o cf.deb 'https://packages.cloudfoundry.org/stable?release=debian64&version=7.2.0&source=github-rel'
            sudo dpkg -i cf.deb
            cf -v
            cf api "$CF_ENDPOINT"
            cf auth "$CF_USER" "$CF_PASSWORD"
            cf add-plugin-repo CF-Community https://plugins.cloudfoundry.org
            cf install-plugin app-autoscaler-plugin -r CF-Community -f
            cf target -o "$CF_ORG" -s "<< parameters.space >>"
      - run:
          name: "Fetch existing manifest"
          command: |
            cf create-app-manifest "tariff-<< parameters.service >>-backend-worker-<< parameters.environment_key >>" -p deploy_manifest.yml
      - run:
          name: "Push Worker"
          command: |
            export IMAGE=enginetransformation/tariff-backend
            export DOCKER_IMAGE=${IMAGE}:<<# parameters.dev-release >>dev-<</ parameters.dev-release >>${CIRCLE_SHA1}
            cf push "tariff-<< parameters.service >>-backend-worker-<< parameters.environment_key >>" -f deploy_manifest.yml --no-route --docker-image "$DOCKER_IMAGE"
      - run:
          name: "Run Migrations"
          command: |
            cf run-task "tariff-<< parameters.service >>-backend-worker-<< parameters.environment_key >>" --command "rake db:migrate" --name "db-migrate"
            cf run-task "tariff-<< parameters.service >>-backend-worker-<< parameters.environment_key >>" --command "rake db:data:migrate" --name "db-data-migrate"


  # Legacy deployers

  cf_deploy_worker:
    parameters:
      space:
        type: string
      domain_prefix:
        type: string
      service:
        type: string
      buildpack_version:
        type: string
        default: "v1.8.43"
    steps:
      - checkout
      - run:
          name: "Setup CF CLI"
          command: |
            curl -L -o cf.deb 'https://packages.cloudfoundry.org/stable?release=debian64&version=7.2.0&source=github-rel'
            sudo dpkg -i cf.deb
            cf -v
            cf api "$CF_ENDPOINT"
            cf auth "$CF_USER" "$CF_PASSWORD"
            cf add-plugin-repo CF-Community https://plugins.cloudfoundry.org
            cf install-plugin app-autoscaler-plugin -r CF-Community -f
            cf target -o "$CF_ORG" -s "<< parameters.space >>"
      - run:
          name: "Fetch existing manifest"
          command: |
            cf create-app-manifest "tariff-<< parameters.service >>-backend-worker-<< parameters.domain_prefix >>" -p deploy_manifest.yml
      - run:
          name: "Push Worker"
          command: |
            export BUILDPACK="https://github.com/cloudfoundry/ruby-buildpack.git#<< parameters.buildpack_version >>"

            cf push "tariff-<< parameters.service >>-backend-worker-<< parameters.domain_prefix >>" -f deploy_manifest.yml --no-route --buildpack $BUILDPACK
      - run:
          name: "Run Migrations"
          command: |
            cf run-task "tariff-<< parameters.service >>-backend-worker-<< parameters.domain_prefix >>" --command "rake db:migrate" --name "db-migrate"
            cf run-task "tariff-<< parameters.service >>-backend-worker-<< parameters.domain_prefix >>" --command "rake db:data:migrate" --name "db-data-migrate"


  cf_blue_green_deploy:
    parameters:
      space:
        type: string
      domain_prefix:
        type: string
      service:
        type: string
      buildpack_version:
        type: string
        default: "v1.8.43"
    steps:
      - checkout
      - run:
          name: "Setup CF CLI"
          command: |
            curl -L -o cf.deb 'https://packages.cloudfoundry.org/stable?release=debian64&version=7.2.0&source=github-rel'
            sudo dpkg -i cf.deb
            cf -v
            cf api "$CF_ENDPOINT"
            cf auth "$CF_USER" "$CF_PASSWORD"
            cf add-plugin-repo CF-Community https://plugins.cloudfoundry.org
            cf install-plugin app-autoscaler-plugin -r CF-Community -f
            cf target -o "$CF_ORG" -s "<< parameters.space >>"
      - run:
          name: "Fetch existing manifest"
          command: |
            cf create-app-manifest "tariff-<< parameters.service >>-backend-<< parameters.domain_prefix >>" -p deploy_manifest.yml
      - run:
          name: "Push new app in dark mode"
          command: |
            # Enables /healthcheck to show the current deployed git sha
            export GIT_NEW_REVISION=$(git rev-parse --short HEAD)
            echo $GIT_NEW_REVISION >REVISION

            export BUILDPACK="https://github.com/cloudfoundry/ruby-buildpack.git#<< parameters.buildpack_version >>"

            # Push as "dark" instance
            cf push "tariff-<< parameters.service >>-backend-<< parameters.domain_prefix >>-dark" -f deploy_manifest.yml --no-route --buildpack $BUILDPACK

            # Map dark route
            cf map-route  "tariff-<< parameters.service >>-backend-<< parameters.domain_prefix >>-dark" apps.internal -n "tariff-<< parameters.service >>-backend-<< parameters.domain_prefix >>-dark"

            # Attach precreated autoscaling policy
            cf attach-autoscaling-policy "tariff-<< parameters.service >>-backend-<< parameters.domain_prefix >>-dark" config/autoscaling/<< parameters.space >>-policy.json
            # Enable routing from this frontend to backend applications which are private
            cf add-network-policy "$CF_FRONTEND_APP-<< parameters.domain_prefix >>" "tariff-<< parameters.service >>-backend-<< parameters.domain_prefix >>-dark" --protocol tcp --port 8080
            cf add-network-policy "$CF_ADMIN_APP-<< parameters.domain_prefix >>" "tariff-<< parameters.service >>-backend-<< parameters.domain_prefix >>-dark" --protocol tcp --port 8080
            cf add-network-policy "$CF_DUTYCALCULATOR_APP-<< parameters.domain_prefix >>" "tariff-<< parameters.service >>-backend-<< parameters.domain_prefix >>-dark" --protocol tcp --port 8080

      - run:
          name: "Verify new version is working on dark URL."
          command: |
            sleep 15
            # TODO: Retry
            # Verify new version is working on dark URL.
            APP_NAME="tariff-<< parameters.service >>-backend-<< parameters.domain_prefix >>-dark"

            HTTPCODE=`cf ssh $APP_NAME -c 'curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/healthcheck'`

            if [ "$HTTPCODE" -ne 200 ];then
              echo "dark route not available, failing deploy ($HTTPCODE)"
              exit 1
            fi
      - run:
          name: "Switch dark app to live"
          command: |
            # Send "real" url to new version
            cf unmap-route  "tariff-<< parameters.service >>-backend-<< parameters.domain_prefix >>-dark" apps.internal -n "tariff-<< parameters.service >>-backend-<< parameters.domain_prefix >>-dark"
            cf map-route  "tariff-<< parameters.service >>-backend-<< parameters.domain_prefix >>-dark" apps.internal -n "tariff-<< parameters.service >>-backend-<< parameters.domain_prefix >>"

            # Stop sending traffic to previous version
            cf unmap-route  "tariff-<< parameters.service >>-backend-<< parameters.domain_prefix >>" apps.internal -n "tariff-<< parameters.service >>-backend-<< parameters.domain_prefix >>"

            # stop previous version
            cf stop "tariff-<< parameters.service >>-backend-<< parameters.domain_prefix >>"

            # delete previous version
            cf delete "tariff-<< parameters.service >>-backend-<< parameters.domain_prefix >>" -f

            # Switch name of "dark" version to claim correct name
            cf rename "tariff-<< parameters.service >>-backend-<< parameters.domain_prefix >>-dark" "tariff-<< parameters.service >>-backend-<< parameters.domain_prefix >>"


  sentry-release:
    steps:
      - checkout
      - run:
          name: Create release and notify Sentry of deploy
          command: |
            curl -sL https://sentry.io/get-cli/ | bash
            export SENTRY_RELEASE=$(sentry-cli releases propose-version)
            sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
            sentry-cli releases set-commits $SENTRY_RELEASE --auto
            sentry-cli releases finalize $SENTRY_RELEASE
            sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_ENVIRONMENT

jobs:
  linters:
    docker:
      - image: cimg/ruby:2.7.4
    resource_class: small
    steps:
      - checkout
      - run:
          name: Install C lib dependencies
          command: |
            sudo apt update
            sudo apt install libcurl4-openssl-dev
      - ruby/install-deps
      # - ruby/rubocop-check:
      #     format: progress
      #     label: Inspecting with Rubocop
      - run:
          name: Rubocop changed files
          when: always
          command: bundle exec rubocop $(git diff --name-only --diff-filter=ACM $(git merge-base master HEAD)..HEAD | egrep '\.rb|\.rake') Gemfile
      - run:
          name: Inspecting with Brakeman
          when: always
          command: 'bundle exec brakeman -o test-results/brakeman/brakeman.junit -o brakeman.html --no-progress --separate-models --no-exit-on-warn'
      - store_test_results:
          path: test-results/brakeman/
      - store_artifacts:
          path: brakeman.html

  build:
    environment:
      IMAGE_NAME: enginetransformation/tariff-backend
    parameters:
      dev-build:
        default: false
        type: boolean
    docker:
      - image: cimg/ruby:2.7.4
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.2
          docker_layer_caching: false
      - run:
          name: "Build Docker image"
          command: |
            export GIT_NEW_REVISION=$(git rev-parse --short HEAD)
            echo $GIT_NEW_REVISION >REVISION
            docker build -t $IMAGE_NAME:<<# parameters.dev-build >>dev-<</ parameters.dev-build >>${CIRCLE_SHA1} .
      - run:
          name: "Push image"
          command: |
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:<<# parameters.dev-build >>dev-<</ parameters.dev-build >>${CIRCLE_SHA1}



  test:
    docker:
      - image: cimg/ruby:2.7.4
        environment:
          BUNDLE_JOBS: "3"
          BUNDLE_RETRY: "3"
          RAILS_ENV: test
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/tariff_test"
      - image: circleci/postgres:10-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: tariff_test
          POSTGRES_PASSWORD: postgres
      - image: circleci/redis:4.0.9
        environment:
          - REDIS_URL: "redis://localhost:6379/"
      - image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
        environment:
          - cluster.name: elasticsearch
          - xpack.security.enabled: false
          - transport.host: localhost
          - network.host: 127.0.0.1
          - http.port: 9200
          - discovery.type: single-node
    resource_class: medium
    steps:
      - checkout
      - run:
          name: "Install OS packages"
          command: |
           sudo apt-get update
           sudo apt-get install libcurl4-openssl-dev postgresql-client
      - ruby/install-deps
      - run:
          name: "Setup DB"
          command: |
            RAILS_ENV=test bundle exec rake db:structure:load --trace
      - run:
          name: "Check ElasticSearch for availability"
          command: |
            curl "http://localhost:9200/_cat/health"
      - ruby/rspec-test
      - store_artifacts:
          path: coverage
      - slack/notify:
          channel: deployments
          event: fail
          template: basic_fail_1

  deploy_dev:
    docker:
      - image: cimg/ruby:2.7.4
    environment:
      SENTRY_ENVIRONMENT: "development"
    parameters:
      service:
        type: string
    steps:
      - cf_deploy_docker_worker:
          dev-release: true
          space: "development"
          environment_key: "dev"
          service: << parameters.service >>
      - cf_deploy_docker:
          dev-release: true
          space: "development"
          environment_key: "dev"
          service: << parameters.service >>
      - sentry-release

  deploy_staging:
    docker:
      - image: cimg/ruby:2.7.4
    environment:
      SENTRY_ENVIRONMENT: "staging"
    parameters:
      service:
        type: string
    steps:
      - cf_deploy_worker:
          space: "staging"
          domain_prefix: "staging"
          service: << parameters.service >>
      - cf_blue_green_deploy:
          space: "staging"
          domain_prefix: "staging"
          service: << parameters.service >>
      - sentry-release

  deploy_production:
    docker:
      - image: cimg/ruby:2.7.4
    environment:
      SENTRY_ENVIRONMENT: "production"
    parameters:
      service:
        type: string
    steps:
      - cf_deploy_worker:
          space: "production"
          domain_prefix: "production"
          service: << parameters.service >>
      - cf_blue_green_deploy:
          space: "production"
          domain_prefix: "production"
          service: << parameters.service >>
      - sentry-release

workflows:
  version: 2
  ci:
    jobs:
      - linters:
          context: trade-tariff
      - test:
           context: trade-tariff
           filters:
             branches:
               ignore:
                 - master
      - build:
          name: build_dev
          context: trade-tariff
          dev-build: true
          filters:
            branches:
              ignore:
                - master
          requires:
            - test
      - deploy_dev:
           matrix:
             parameters:
               service:
                 - xi
                 - uk
           context: trade-tariff
           filters:
             branches:
               ignore:
                 - master
                 - /^dependabot\/.*/
           requires:
             - build_dev
      - deploy_staging:
           matrix:
             parameters:
               service:
                 - xi
                 - uk
           context: trade-tariff
           filters:
             branches:
               only:
                 - master
      - hold_production:
           type: approval
           filters:
             branches:
               only:
                 - master
           requires:
             - deploy_staging
      - deploy_production:
           matrix:
             parameters:
               service:
                 - xi
                 - uk
           context: trade-tariff
           filters:
             branches:
               only:
                 - master
           requires:
             - hold_production
