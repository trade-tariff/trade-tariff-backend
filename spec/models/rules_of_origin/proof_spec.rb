require 'rails_helper'

RSpec.describe RulesOfOrigin::Proof do
  describe 'attributes' do
    it { is_expected.to respond_to :scheme }
    it { is_expected.to respond_to :summary }
    it { is_expected.to respond_to :detail }
  end

  describe '.new' do
    subject do
      described_class.new 'summary' => 'Proof summary', 'detail' => 'detail.md'
    end

    it { is_expected.to have_attributes summary: 'Proof summary' }
    it { is_expected.to have_attributes detail: 'detail.md' }
  end

  describe '#content' do
    subject :proof do
      build :rules_of_origin_proof, detail: proof_file, scheme: scheme
    end

    before do
      allow(scheme_set).to receive(:read_referenced_file)
                           .with('proofs', 'proof-1.md')
                           .and_return('proof content')
    end

    let(:proof_file) { 'proof-1.md' }
    let(:scheme) { build :rules_of_origin_scheme, scheme_set: scheme_set }
    let(:scheme_set) { instance_double RulesOfOrigin::SchemeSet }

    it 'will read the referenced file' do
      expect(proof).to \
        have_attributes content: 'proof content'
    end

    context 'with blank file' do
      let(:proof_file) { '' }

      it { expect(proof).to have_attributes content: '' }
    end
  end

  describe '#id' do
    subject(:proof) { first_proof.id }

    let(:first_proof) { build :rules_of_origin_proof, id: id }
    let(:second_proof) { build :rules_of_origin_proof }

    let :third_proof do
      build :rules_of_origin_proof,
            id: nil,
            summary: first_proof.summary,
            detail: first_proof.detail
    end

    context 'when supplied' do
      let(:id) { 3 }

      it { is_expected.to be 3 }
    end

    context 'when autogenerated' do
      let(:id) { nil }

      it('is generated') { is_expected.to be_present }
      it('is different per instance') { is_expected.not_to eq second_proof.id }
      it('is content addressable') { is_expected.to eq third_proof.id }
    end
  end
end
