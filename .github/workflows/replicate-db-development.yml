name: Run DB Replicate Job

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches-ignore:
      - main
  workflow_dispatch:
    inputs:
      docker_tag:
        description: "Docker image tag to run"
        required: false
        default: "latest"
      ref:
        description: 'The git ref to deploy'
        required: true
        default: 'main'

env:
  AWS_REGION: eu-west-2
  IAM_ROLE_ARN: arn:aws:iam::844815912454:role/GithubActions-ECS-Deployments-Role
  CLUSTER: trade-tariff-cluster-dev
  SERVICE_NAME: db-replicate-job
  ENVIRONMENT: development
  SECRET_NAME: db-replicate-uk-worker-configuration
  ECR_URL: 382373577178.dkr.ecr.eu-west-2.amazonaws.com/tariff-backend-production

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - id: docker-tag
        run: echo "DOCKER_TAG=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
      - uses: trade-tariff/trade-tariff-tools/.github/actions/terraform-plan@main
        with:
          environment: ${{ env.ENVIRONMENT }}
          ref: ${{ inputs.ref || steps.docker-tag.outputs.DOCKER_TAG }}
          ssh-key: ${{ secrets.PRIVATE_SSH_KEY }}
      - uses: trade-tariff/trade-tariff-tools/.github/actions/build-and-push@main
        with:
          ecr-url: ${{ env.ECR_URL }}
          ref: ${{ steps.docker-tag.outputs.DOCKER_TAG }}

  run-job:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - id: secrets-json
        run: |
          TF_SECRETS=$(aws secretsmanager get-secret-value \
            --secret-id "${{ env.SECRET_NAME }}" \
            --query 'SecresString' \
            --output text)
          echo "JSON_SECRETS=[$TF_SECRETS]" >> "$GITHUB_OUTPUT"
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0
      - uses: trade-tariff/trade-tariff-tools/.github/actions/setup-ssh@main
        with:
          ssh-key: ${{ secrets.PRIVATE_SSH_KEY }}
      - run: cd terraform && terraform init -backend-config=backends/${{ env.ENVIRONMENT }}.tfbackend
        shell: bash

      - name: Terraform Apply (create ECS job definition)
        run: |
          cd terraform && terraform apply \
            -target=module.${{ env.SERVICE_NAME }} \
            -var-file=config_${{ env.ENVIRONMENT }}.tfvars \
            -auto-approve \
            -lock-timeout=10m \
            -var="create_job_task=true" \
            -var="service_name=${{ env.SERVICE_NAME }}" \
            -var="docker_image=382373577178.dkr.ecr.eu-west-2.amazonaws.com/tariff-backend-production" \
            -var="docker_tag=${{ inputs.docker_tag || steps.docker-tag.outputs.DOCKER_TAG }}" \
            -var="container_command=[\"/bin/sh\", \"-c\", \"./bin/db_replicate.sh\"]" \
            -var="region=${{ env.AWS_REGION }}" \
            -var="cpu=2048" \
            -var="memory=8192" \
            -var="cloudwatch_log_group_name=platform-logs-${{ env.ENVIRONMENT }}" \
            -var="service_environment_config=${{ steps.secrets-json.outputs.JSON_SECRETS }}" \
            -var="environment=${{ env.ENVIRONMENT }}" \
            -auto-approve
        env:
          TF_LOG: DEBUG


      - name: Run ECS task
        run: |
          aws ecs run-task \
            --cluster "$CLUSTER" \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[trade-tariff-dev-vpc],securityGroups=[trade-tariff-ecs-security-group-dev],assignPublicIp=DISABLED}" \
            --task-definition "$SERVICE_NAME" \
            --started-by github-action
