name: Run DB Replicate Job

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches-ignore:
      - main
  workflow_dispatch:
    inputs:
      docker_tag:
        description: "Docker image tag to run"
        required: false
        default: "latest"
      ref:
        description: 'The git ref to deploy'
        required: true
        default: 'main'

env:
  AWS_REGION: eu-west-2
  IAM_ROLE_ARN: arn:aws:iam::844815912454:role/GithubActions-ECS-Deployments-Role
  CLUSTER: trade-tariff-cluster-dev
  SERVICE_NAME: db-replicate-job-844815912454
  ENVIRONMENT: development
  SECRET_NAME: db-replicate-uk-worker-configuration
  ECR_URL: 382373577178.dkr.ecr.eu-west-2.amazonaws.com/tariff-backend-production

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - id: docker-tag
        run: echo "DOCKER_TAG=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
      - uses: trade-tariff/trade-tariff-tools/.github/actions/terraform-plan@main
        with:
          environment: ${{ env.ENVIRONMENT }}
          ref: ${{ inputs.ref || steps.docker-tag.outputs.DOCKER_TAG }}
          ssh-key: ${{ secrets.PRIVATE_SSH_KEY }}
      - uses: trade-tariff/trade-tariff-tools/.github/actions/build-and-push@main
        with:
          ecr-url: ${{ env.ECR_URL }}
          ref: ${{ steps.docker-tag.outputs.DOCKER_TAG }}

  run-job:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: trade-tariff/trade-tariff-tools/.github/actions/setup-ssh@main
        with:
          ssh-key: ${{ secrets.PRIVATE_SSH_KEY }}
      - name: Fetch Subnet and Security Group IDs
        id: network
        run: |
#          export SUBNETS=$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=*private*" --query 'Subnets[*].SubnetId' --output text --region "$AWS_REGION" | tr '\t' '\n' | jq -R . | jq -s .)
          export SG=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=trade-tariff-ecs-security-group-development" --query 'SecurityGroups[0].GroupId' --output text --region "$AWS_REGION")
#          echo "SUBNETS=$SUBNETS" >> $GITHUB_ENV
          echo "SG=$SG" >> $GITHUB_ENV
      - name: Run ECS task
        run: |
          aws ecs run-task \
            --cluster "${{ env.CLUSTER }}" \
            --launch-type FARGATE \
            --region "${{ env.AWS_REGION }}"
            --network-configuration "awsvpcConfiguration={subnets=["subnet-0b9e9f24f0cb6fbfe", "subnet-0badb8d71340d2c04", "subnet-0dbbbcbca04929f26"],securityGroups=[${{ env.SG }}],assignPublicIp=DISABLED}" \
            --task-definition "${{ env.SERVICE_NAME }}" \
            --started-by github-action \
            --overrides '{
                "containerOverrides": [{
                  "service_count": 1,
                  "command": ["/bin/sh", "-c", "./bin/db_replicate.sh"]
                }]
              }'
