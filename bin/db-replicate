#!/usr/bin/env bash

[[ "$TRACE" ]] && set -o xtrace
set -o errexit
set -o nounset
set -o pipefail
set -o noclobber

START_TIME=$(date +%s)

declare -A SERVICE_COUNTS
declare -A ACCOUNT_IDS=(
    ["development"]="844815912454"
    ["staging"]="451934005581"
    ["production"]="382373577178"
)

if [ -z "$ENVIRONMENT" ]; then
  echo "You need to set the ENVIRONMENT environment variable."
  exit 1
fi

get_desired_count_for_service() {
    local service=$1

    aws ecs describe-services --cluster "$CLUSTER_NAME" \
        --services "$service" \
        --query 'services[0].desiredCount' \
        --output text
}

set_desired_count_for_service_to() {
    local service=$1
    local desired_count=$2

    aws ecs update-service --cluster "$CLUSTER_NAME" \
        --service "$service" \
        --desired-count "$desired_count" > /dev/null
}

stop_services() {
  for service in $SERVICES; do
      SERVICE_COUNTS[$service]=$(get_desired_count_for_service "$service")

      set_desired_count_for_service_to "$service" 0
  done

  sleep 20 # Give the services time to stop
}

restore_database() {
  curl --silent -u "$DB_DUMP_USER":"$DB_DUMP_PASSWORD" "$DB_DUMP_SERVER""$RESTORE_FILE" | gzip -d | psql "$DATABASE_URL"
}

start_services() {
  for service in $SERVICES; do
      local desired_count
      desired_count=${SERVICE_COUNTS[$service]}

      if [ "$desired_count" -eq 0 ]; then
          desired_count=1
      fi

      set_desired_count_for_service_to "$service" "$desired_count"
  done
}

lookup_persistence_bucket() {
  local environment=$1
  local account_id=${ACCOUNT_IDS[$environment]}

  echo "s3://trade-tariff-persistence-$account_id"
}

sync_buckets() {
  local source_bucket
  local target_bucket
  source_bucket="$(lookup_persistence_bucket "$1")"
  target_bucket="$(lookup_persistence_bucket "$2")"

  aws s3 sync "$source_bucket/data/exchange_rates/" "$target_bucket/data/exchange_rates/"
}

echo "Stopping services $SERVICES"
stop_services

restore_database

echo "SQL backup restored successfully"

echo "Starting services  $SERVICES"
start_services

END_TIME=$(date +%s)
ELAPSED_TIME=$((END_TIME - START_TIME))

echo "Database replication complete. Time: ${ELAPSED_TIME}s"

echo "Syncing exchange rates"

sync_buckets "production" "$ENVIRONMENT"

echo "Exchange rates synced successfully"
